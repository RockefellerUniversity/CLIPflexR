###here is the processing for the standard CLIP with a 3' L32 linker and 5' RL5D3 - this could be modified to work for other cloning strategies such as the BrdU-CLIP
###I have left comments showing the original command line command, and example R commands for how I ran each chunk, and am happy to upload the original file if people want to reproduce my processing
###another thing to add post mapping and converting bams to beds would be collapsing PCR duplicates, which I have still been doing in command line 
#load required packages
#library(BiocManager)
#library(Rsamtools)
#library(rtracklayer)
#library(Rbowtie2)
#library(GenomicAlignments)
#I had already installed fastx toolkit, cztools, and HOMER

fileToGunZip <- "/Users/kathryn/KRG_112118_Ago1_Ago2_CLIP_CHIKV_miRmuts/KRG_112118_S1_R1_001.fastq.gz"

#unzip original command:
#gunzip KRG121817_S2_R1_001.fastq.gz

gunzip <- function(fileToGunZip,gunzip="gunzip",
                   stderr=paste0(getwd(),"gunzip_stderr"),
                   stdout=paste0(getwd(),"gunzip_stdout")){
  cmd <- gunzip
  if(!file.exists(fileToGunZip))stop("File does not exist")
  
  fileWithoutExtension <- tools::file_path_sans_ext(fileToGunZip)
  if(file.exists(fileToGunZip) & !file.exists(fileWithoutExtension)){
    args <- c(fileWithoutExtension,"-k")
    print(cmd)
    print(args)
    
    system2(cmd,
            args,
            stdout=stdout,
            stderr=stderr
    )
  }
  return(fileWithoutExtension)
}

#R command to unzip:
file <- gunzip(fileToGunZip)

#quality filter original command:
#fastq_quality_filter -Q 33 -q 20 -p 80 -i KRG121817_S2_R1_001.fastq -o qf_KRG121817_S2_R1_001.fastq

fastq_quality_filter <- function(fileTofqf,fqf="fastq_quality_filter",qEncoding=33,
                                 minimumQuality=20,
                                 minimumPercentOfRead=80,                                 
                                 stderr=paste0(getwd(),"fastq_quality_filter_stderr"),
                                 stdout=paste0(getwd(),"fastq_quality_filter_stdout")){
  
  
  cmd <- fqf
  
  if(!file.exists(fileTofqf))stop("File does not exist")
  
  file_fqf <- file.path(dirname(fileTofqf),paste0("QF_",basename(fileTofqf)))
  if(file.exists(fileTofqf) & !file.exists(file_fqf)){
    
    
    args <- c(
      paste0("-Q ",qEncoding),
      paste0("-q ",minimumQuality),
      paste0("-p ",minimumPercentOfRead),
      paste0("-i  ",fileTofqf),
      paste0("-o ",file_fqf)      
    )
    print(cmd)
    print(args)
    
    system2(cmd,
            args,
            stdout=stdout,
            stderr=stderr
    )
  }
  return(file_fqf)
}

#R command to quality filter:
file_QF <- fastq_quality_filter(file,fqf = "/Users/kathryn/FastX/fastq_quality_filter")

##get quality stats original command:
#fastx_quality_stats -Q 33 -i KRG121817_S2_R1_001.fastq -o stats_KRG121817_S2_R1_001.txt

fastx_quality_stats <- function(fileTofqs,fqs="fastx_quality_stats",qEncoding=33,
                                stderr=paste0(getwd(),"fastq_quality_stats_stderr"),
                                stdout=paste0(getwd(),"fastq_quality_stats_stdout")){
  cmd <- fqs
  
  if(!file.exists(fileTofqs))stop("File does not exist")
  
  file_fqs <- file.path(dirname(fileTofqs),gsub("\\.fastq",".txt",basename(fileTofqs)))
  if(file.exists(fileTofqs) & !file.exists(file_fqs)){
    
    
    args <- c(
      paste0("-Q ",qEncoding),
      paste0("-i  ",fileTofqs),
      paste0("-o ",file_fqs)      
    )
    print(cmd)
    print(args)
    
    system2(cmd,
            args,
            stdout=stdout,
            stderr=stderr
    )
  }
  return(file_fqs)
}

#R command to get quality stats:
fastx_quality_stats(file_QF,fqs="/Users/kathryn/FastX/fastx_quality_stats")

#collapse original command:
#fastx_collapser -v -Q 33 -i QF_KRG092018_Aae.fasta -o coll_KRG092018_Aae.fasta

fastx_collapser <- function(fileTofxc,fxc="fastx_collapser",qEncoding=33,
                            stderr=paste0(getwd(),"fastq_collapse_stderr"),
                            stdout=paste0(getwd(),"fastq_collapse_stdout")){
  cmd <- fxc
  
  if(!file.exists(fileTofxc))stop("File does not exist")
  
  file_fxc <- file.path(dirname(fileTofxc),gsub("\\.fastq","_collapse.fastq",basename(fileTofxc)))
  if(file.exists(fileTofxc) & !file.exists(file_fxc)){
    
    args <- c(
      paste0("-v "),
      paste0("-Q ",qEncoding),
      paste0("-i  ",fileTofxc),
      paste0("-o ",file_fxc)      
    )
    print(cmd)
    print(args)
    
    system2(cmd,
            args,
            stdout=stdout,
            stderr=stderr
    )
  }
  return(file_fxc)
}

#R command to collapse:
file_collapse <- fastx_collapser(file,fxc="/Users/kathryn/FastX/fastx_collapser")

#barcode splitter original command:
#cat QF_KRG092018_Aae.fasta | time fastx_barcode_splitter.pl --bcfile BC.txt --bol --mismatches 0 --prefix "KRG_092018_"

fastx_barcode_splitter <- function(fileTofxc,bcFile,mismatches=0,
                                   fxc="fastx_barcode_splitter.pl",
                                   stderr=paste0(getwd(),"fastx_barcode_splitter_stderr"),
                                   stdout=paste0(getwd(),"fastx_barcode_splitter_stdout")){
  
  cmd <- fxc
  
  if(!file.exists(fileTofxc))stop("File does not exist")
  
  prefix <- gsub("QF_|\\.fasta|\\.fastq","",basename(fileTofxc))
  
  
  cmd2 <- paste0("cat ",
                 fileTofxc," ",
                 "| ",
                 cmd," ",
                 " --bcfile ",bcFile," ",
                 "--bol --mismatches ",mismatches," ",
                 "--prefix '",prefix,"_' ")
  temp <- system(cmd2,wait = TRUE,intern = TRUE)
  
  return(temp)
}

#R commmand to split barcodes:
fastx_barcode_splitter(file_collapse, bcFile, fxc = "/Users/kathryn/FastX/fastx_barcode_splitter.pl")
bcFile <- "/Users/kathryn/KRG_112118_Ago1_Ago2_CLIP_CHIKV_miRmuts/BC.txt"

fastx_stripBarcode <- function(filesToRun,
                               sb="stripBarcode.pl",
                               PATHTOPERLLIB=NULL,
                               stderr=paste0(getwd(),"stripBarcode_stderr"),
                               stdout=paste0(getwd(),"stripBarcode_stdout"),
                               linkerlength=27){
  fileToRun <- filesToRun[1]
  cmd <- sb
  
  if(!file.exists(fileToRun)) stop("File does not exist")
  
  exportPATH <- ifelse(!is.null(PATHTOPERLLIB),paste0("export PERL5LIB=",PATHTOPERLLIB,";"),"")
  
  cmd2 <- paste0(exportPATH," ",
                 cmd," ",
                 " -len ",linkerlength," -v ",
                 " ",fileToRun," ",
                 paste(fileToRun,"_rm5",sep=""))
  #"temp.rm")
  temp <- system(cmd2,wait = TRUE,intern = TRUE)
  
  return(temp)
}

#R command to strip barcode:
Dir <- "/Users/kathryn/KRG_112118_Ago1_Ago2_CLIP_CHIKV_miRmuts/redo"
split <- dir(Dir, pattern= "KRG", full.names = TRUE)
for (file in split) { fastx_stripBarcode(file,
                   sb="/Users/kathryn/CTK/stripBarcode.pl",
                   PATHTOPERLLIB = "/Users/kathryn/czplib")
  }


#clip linker original command:
#fastx_clipper -l 18 -a GTGTCAGTCACTTCCAGCGG -v -o "$i""_rm3.fa" -i "$i"

fastx_clipper <- function(fileTofqs,fqc="fastx_clipper",length=18,
                          adaptor="GTGTCAGTCACTTCCAGCGG",
                          stderr=paste0(getwd(),"clipper_stats_stderr"),
                          stdout=paste0(getwd(),"clipper_stats_stdout")){
  cmd <- fqc
  
  if(!file.exists(fileTofqs))stop("File does not exist")
  
  file_fqs <- file.path(dirname(fileTofqs),gsub("rm","rm5.fa",basename(fileTofqs)))
  if(file.exists(fileTofqs) & !file.exists(file_fqs)){
    
    args <- c(
      paste0("-l ",length),
      paste0("-a  ",adaptor),
      paste0("-o ",file_fqs),
      paste0("-i ",fileTofqs)
    )
    print(cmd)
    print(args)
    
    system2(cmd,
            args,
            stdout=stdout,
            stderr=stderr
    )
  }
  return(file_fqs)
}

#R command to clip linker:
clip <- dir(Dir, pattern= "*_rm5", full.names = TRUE)
Dir <- "/Users/kathryn/KRG_112118_Ago1_Ago2_CLIP_CHIKV_miRmuts/BCsplit/"
for (file in clip) { fastx_clipper(file,fqc = "/Users/kathryn/FastX/fastx_clipper")
}


bowtie_index <- function(genomeFasta,
                         outFasta=gsub("\\.fa","",genomeFasta)
) {
  require(Rbowtie2)
  if(!dir.exists(outFasta)){
    bowtie2_build(references=genomeFasta, 
                  bt2Index=outFasta)
  }
  
}

#R command to create index:
bowtie_index("/Users/kathryn/Desktop/alphavirusflavivirussequencefiles/CHIKV-LR.fa",
             "/Users/kathryn/Desktop/alphavirusflavivirussequencefiles/CHIKV-LR")

bowtie_align <- function(fq,index,sam=gsub("\\.fq|\\.fastq|\\.rm|\\.fa5",".sam",fq)
) {
  require(Rbowtie2)
  if(!dir.exists(sam)){
    bowtie2(bt2Index = index,
            samOutput = sam,
            seq1 = fq,"--threads 4 -f -N 1 -L 18")
    Rsamtools::asBam(sam,gsub("\\.sam","",sam))
  }
  
}

#R command to align:
Dir <- "/Users/kathryn/KRG_112118_Ago1_Ago2_CLIP_CHIKV_miRmuts/BCsplit"
tomap <- dir(Dir,pattern="rm5.fa5",full.names = TRUE)
for (file in tomap) {
  bowtie_align(file, "/Users/kathryn/Desktop/alphavirusflavivirussequencefiles/CHIKV-LR")
}

bowtie_align("/Users/kathryn/KRG_Ago1vs2_STDvsD/remove_linkers/KRG_040418_IgG_9D6_S2B_rm5.fa5", "/Users/kathryn/KRG_Ago1vs2_STDvsD/9D6/Aedes-aegypti-Liverpool_SCAFFOLDS_AaegL3")


#original command convert to BED:
# bedtools bamtobed -i 9D6_S1A_contigs.bam > 9D6_S1A_contigs.bed

bamtobed <- function(file,filtDup=FALSE){
  require(GenomicAlignments)
  require(rtracklayer)
  temp <- readGAlignments(file,
                          param=ScanBamParam(what = "qname"))
  names(temp) <- mcols(temp)$qname
  temp <- granges(temp)
  
  if(filtDup) temp <- temp[!duplicated(temp),]
  export.bed(temp,
             con = gsub("\\.bam",".bed",file))
}

#R command for bamtobed:
Dir <- "/Users/kathryn/KRG_112118_Ago1_Ago2_CLIP_CHIKV_miRmuts/BCsplit"
mapped <- dir(Dir,pattern="bam$",full.names = TRUE)
print(mapped)
for (file in mapped) {
  bamtobed(file)
}
bamtobed("/Users/kathryn/KRG_Ago1vs2_STDvsD/remove_linkers/KRG_040418_IgG_9D6_S2B_rm5.fa5.bam")

#original commands to make tag directory:
#makeTagDirectory 9D6_S1A_contigs_TagDir/ 9D6_S1A_contigs.bed -single -format bed
#and to find peaks:
#findPeaks 9D6_S1A_TagDir/ -o auto -style factor -L 2 -localSize 10000 -strand separate -minDist 50 -size 10 -fragLength 10 

homer_peaks <- function(fileTofqs,maketagdir="makeTagDirectory",
                        findpeaks="findpeaks",
                        stderr=paste0(getwd(),"homer_stats_stderr"),
                        stdout=paste0(getwd(),"homer_stats_stdout")){
  cmd <- maketagdir
  
  if(!file.exists(fileTofqs))stop("File does not exist")
  baseNAME <- make.names(basename(fileTofqs))
  tagDir <- file.path(dirname(fileTofqs),
                      gsub("\\.bed","",baseNAME))
  
  if(file.exists(fileTofqs) & !dir.exists(tagDir)){
    
    dir.create(tagDir,showWarnings = TRUE,recursive = TRUE)
    
    args <- c(
      paste0(tagDir),
      paste0(fileTofqs),
      paste0("-single "),
      paste0("-format bed ")
    )
    print(cmd)
    print(args)
    
    system2(cmd,
            args,
            stdout=stdout,
            stderr=stderr
    )
  }
  
  cmd <- findpeaks
  
  
  if(dir.exists(tagDir)){
    
    
    args <- c(
      paste0(tagDir),
      paste0("-o auto -style factor -L 2 -localSize 10000 -strand separate -minDist 50 -size 10 -fragLength 10")
    )
    print(cmd)
    print(args)
    
    system2(cmd,
            args,
            stdout=stdout,
            stderr=stderr
    )
    
  }
  return("")
}

#R command to maketagdir and findpeaks
Dir <- "/Users/kathryn/KRG_112118_Ago1_Ago2_CLIP_CHIKV_miRmuts/BCsplit"
bedfile <- dir(Dir,pattern="*.bed",full.names = TRUE)
for (file in bedfile) {
  homer_peaks(file, maketagdir = "/Users/kathryn/homer/bin/makeTagDirectory", findpeaks = "/Users/kathryn/homer/bin/findPeaks")
}

#want to rename peak files to match bedfiles couldn't figure it out in R, did this command in terminal; renames peaks.txt to folder_name.txt and out of folder 
for subdir in *; do mv $subdir/peaks.txt $subdir.txt; done;
